# Generated by Django 3.0.3 on 2020-09-05 21:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, null=True, unique=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active.Unselect this instead of deleting accounts.', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'brainscore_user',
            },
        ),
        migrations.CreateModel(
            name='BenchmarkInstance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField()),
                ('ceiling', models.FloatField(default=0, null=True)),
                ('ceiling_error', models.FloatField(null=True)),
            ],
            options={
                'db_table': 'brainscore_benchmarkinstance',
            },
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('identifier', models.CharField(db_column='name', max_length=200)),
                ('public', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'brainscore_model',
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.CharField(max_length=300)),
                ('year', models.IntegerField()),
                ('url', models.CharField(max_length=1000, unique=True)),
                ('bibtex', models.TextField()),
            ],
            options={
                'db_table': 'brainscore_reference',
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('model_type', models.CharField(default='BaseModel', max_length=30)),
                ('status', models.CharField(default='unknown', max_length=25)),
                ('submitter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'brainscore_submission',
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_raw', models.FloatField(default=0, null=True)),
                ('score_ceiled', models.FloatField(default=0, null=True)),
                ('error', models.FloatField(default=0, null=True)),
                ('start_timestamp', models.DateTimeField(blank=True)),
                ('end_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('comment', models.CharField(max_length=1000, null=True)),
                ('benchmark', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='benchmarks.BenchmarkInstance')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='benchmarks.Model')),
            ],
            options={
                'db_table': 'brainscore_score',
            },
        ),
        migrations.AddField(
            model_name='model',
            name='reference',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='benchmarks.Reference'),
        ),
        migrations.AddField(
            model_name='model',
            name='submission',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='benchmarks.Submission'),
        ),
        migrations.CreateModel(
            name='BenchmarkType',
            fields=[
                ('identifier', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('order', models.IntegerField(default=999)),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='benchmarks.BenchmarkType')),
                ('reference', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='benchmarks.Reference')),
            ],
            options={
                'db_table': 'brainscore_benchmarktype',
            },
        ),
        migrations.AddField(
            model_name='benchmarkinstance',
            name='benchmark_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='benchmarks.BenchmarkType'),
        ),
    ]
