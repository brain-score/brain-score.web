# Generated by Django 3.0.3 on 2020-08-31 19:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('benchmarks', '0002_benchmark_version'),
    ]

    operations = [
        migrations.CreateModel(
            name='BenchmarkInstance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField()),
                ('ceiling', models.FloatField(default=0, null=True)),
                ('ceiling_error', models.FloatField(null=True)),
            ],
            options={
                'db_table': 'brainscore_benchmarkinstance',
            },
        ),
        migrations.CreateModel(
            name='BenchmarkType',
            fields=[
                ('identifier', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('order', models.IntegerField(default=999)),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='benchmarks.BenchmarkType')),
            ],
            options={
                'db_table': 'brainscore_benchmarktype',
            },
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('identifier', models.CharField(db_column='name', max_length=200)),
                ('public', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'brainscore_model',
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.CharField(max_length=300)),
                ('year', models.IntegerField()),
                ('url', models.CharField(max_length=1000, unique=True)),
                ('bibtex', models.TextField()),
            ],
            options={
                'db_table': 'brainscore_reference',
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('model_type', models.CharField(default='BaseModel', max_length=30)),
                ('status', models.CharField(default='unknown', max_length=25)),
            ],
            options={
                'db_table': 'brainscore_submission',
            },
        ),
        migrations.DeleteModel(
            name='Benchmark',
        ),
        migrations.DeleteModel(
            name='ModelMeta',
        ),
        migrations.DeleteModel(
            name='ModelReference',
        ),
        migrations.RemoveField(
            model_name='user',
            name='datefield1',
        ),
        migrations.RemoveField(
            model_name='user',
            name='datefield2',
        ),
        migrations.RemoveField(
            model_name='user',
            name='datefield3',
        ),
        migrations.AddField(
            model_name='score',
            name='comment',
            field=models.CharField(max_length=1000, null=True),
        ),
        migrations.AddField(
            model_name='score',
            name='end_timestamp',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name='score',
            name='start_timestamp',
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='user',
            name='is_active',
            field=models.BooleanField(default=False, help_text='Designates whether this user should be treated as active.Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AlterUniqueTogether(
            name='score',
            unique_together=set(),
        ),
        migrations.AlterModelTable(
            name='score',
            table='brainscore_score',
        ),
        migrations.AlterModelTable(
            name='user',
            table='brainscore_user',
        ),
        migrations.AddField(
            model_name='submission',
            name='submitter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='model',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='model',
            name='reference',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='benchmarks.Reference'),
        ),
        migrations.AddField(
            model_name='model',
            name='submission',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='benchmarks.Submission'),
        ),
        migrations.AddField(
            model_name='benchmarktype',
            name='reference',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='benchmarks.Reference'),
        ),
        migrations.AddField(
            model_name='benchmarkinstance',
            name='benchmark_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='benchmarks.BenchmarkType'),
        ),
        migrations.RemoveField(
            model_name='score',
            name='layer',
        ),
        migrations.AlterField(
            model_name='score',
            name='benchmark',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='benchmarks.BenchmarkInstance'),
        ),
        migrations.AlterField(
            model_name='score',
            name='model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='benchmarks.Model'),
        ),
    ]
